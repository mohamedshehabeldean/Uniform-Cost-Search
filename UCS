#ucs with python

graph={
    's':[('a',2),('b',3),('d',5)],
    'a':[('c',4)],
    'b':[('d',4)],
    'c':[('d',1),('g',2)],
    'd':[('g',5)]
}
# helper function
def path_cost(path):
    total_cost=0
    for(node,cost) in path:
        total_cost += cost
    return total_cost,path[-1][0]
def ucs(graph,start,goal):
    visited=[]
    queue=[[(start,0)]]
    while queue:
        queue.sort(key=path_cost)
        path = queue.pop(0)
        node = path[-1][0]
        if node in visited:
            continue
        visited.append(node)
        if node == goal:
            return path
        else:
            adjacent_node = graph.get(node, [])
            for (node2, cost) in adjacent_node:
                new_path = path.copy()
                new_path.append((node2, cost))
                queue.append(new_path)
solution = ucs(graph, 's', 'g')
print("solution is  :", solution)
print("cost is ", path_cost(solution))
